    echo "üîç Validating Apple API signing environment..."

    #echo "Downloading provisioning profile..."
    #curl -fSL "$PROVISIONING_PROFILE" -o $CM_BUILD_DIR/Garbcode_sign_app_profile.mobileprovision
    #    echo "export PROVISIONING_PROFILE=\"$CM_BUILD_DIR/Garbcode_sign_app_profile.mobileprovision\"" >> $CM_ENV
    #    echo "Provisioning profile path exported to \$CM_ENV"

    # Check for the .p8 API key file at the expected path
    if [[ ! -f "$APP_STORE_CONNECT_API_KEY_PATH" ]]; then
      echo "‚ùå .p8 file not found: $APP_STORE_CONNECT_API_KEY_PATH"
      exit 1
    fi

    for var in APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID APPLE_TEAM_ID BUNDLE_ID PROFILE_TYPE; do
      if [[ -z "${!var}" ]]; then
        echo "‚ùå Missing required env var: $var"
        exit 1
      else
        echo "‚úÖ $var is set: ${!var}"
      fi
    done

    echo "APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER"
    echo "APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID"
    echo "APP_STORE_CONNECT_API_KEY: $APP_STORE_CONNECT_API_KEY"
    echo "APP_STORE_CONNECT_API_KEY_PATH: $APP_STORE_CONNECT_API_KEY_PATH"
    echo "APPLE_TEAM_ID: $APPLE_TEAM_ID"
    echo "BUNDLE_ID: $BUNDLE_ID"
    echo "PROFILE_TYPE: $PROFILE_TYPE"
    echo "CERT_P12_URL: $CERT_P12_URL"
    # echo "PROFILE_URL: $PROFILE_URL"  # Uncomment if you want this too
    echo "CERT_PASSWORD: $CERT_PASSWORD"
    echo "PROVISIONING_PROFILE: $PROVISIONING_PROFILE"
    echo "CERTIFICATE_PRIVATE_KEY: $CERTIFICATE_PRIVATE_KEY"

      #echo "Downloading .p12 certificate and provisioning profile..."

      #curl -o certificate.p12 "$CERT_P12_URL"
      #curl -o provisioning_profile.mobileprovision "$PROVISIONING_PROFILE"
      #curl -o private_key.pem "$CERTIFICATE_PRIVATE_KEY"

      #echo "Setting up keychain..."
      #KEYCHAIN_PATH="$HOME/Library/Keychains/codemagic.keychain-db"
      #security create-keychain -p "" codemagic.keychain
      #security default-keychain -s codemagic.keychain
      #security unlock-keychain -p "" codemagic.keychain
      #security set-keychain-settings

      #echo "Importing certificate..."
      #security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$CERT_PASSWORD" -T /usr/bin/codesign

      #CM_PROVISIONING_PROFILE=""
      #PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
      #mkdir -p "$PROFILES_HOME"
      #PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
      #echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
      #echo "Saved provisioning profile $PROFILE_PATH"

# Extract the embedded plist from the provisioning profile
#security cms -D -i "$PROFILE_PATH" > /tmp/profile.plist

# Extract UUID
#UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /tmp/profile.plist)

# Extract Bundle Identifier (assuming it's the first in the Entitlements dictionary)
#BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /tmp/profile.plist | cut -d '.' -f 2-)

#if [[ -z "$UUID" ]]; then
#  echo "‚ùå Missing required variable: UUID"
#  exit 1
#fi
#
#if [[ -z "$BUNDLE_ID" ]]; then
#  echo "‚ùå Missing required variable: BUNDLE_ID"
#  exit 1
#fi
#
#echo "UUID: $UUID"
#echo "Bundle Identifier: $BUNDLE_ID"